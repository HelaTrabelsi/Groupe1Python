"""
Gestion simple de comptes bancaires
---------------------------------------------------------
Fonctionnalit√©s :
- D√©p√¥t / Retrait (avec plafond de retrait)
- Transfert entre comptes
- Historique des op√©rations
- Cr√©er / supprimer des comptes (utilisateurs)
- Modification du plafond de retrait

"""

# --- Imports ---
import tkinter as tk                         # Tkinter : base de l'interface graphique
from tkinter import ttk, messagebox          # ttk (widgets modernes) + bo√Ætes de dialogue
from datetime import datetime                # Pour dater les op√©rations de l‚Äôhistorique
import random                                # Pour g√©n√©rer des num√©ros de compte al√©atoires

# --- Constantes par d√©faut ---
DEFAULT_BALANCE: float = 2000.0              # Solde initial par d√©faut
DEFAULT_LIMIT: float = 1000.0                # Plafond par d√©faut pour les retraits

# =======================
#   Mod√®le : Account
# =======================

class Account:
    def __init__(self, holder_name: str, balance: float = DEFAULT_BALANCE, limit: float = DEFAULT_LIMIT) -> None:
        # Identit√© du titulaire
        self.holder_name: str = holder_name
        # Num√©ro de compte al√©atoire √† 10 chiffres
        self.account_number: int = random.randint(1000000000, 9999999999)
        # Solde du compte
        self.balance: float = float(balance)
        # Plafond de retrait autoris√© par op√©ration
        self.limit: float = float(limit)
        # Liste d‚Äôop√©rations
        self.liste_historique: List[dict] = []

    def withdraw(self, amount: float) -> bool:
        """Retirer de l'argent : v√©rifie que le montant est > 0, <= limite et <= solde."""
        amount = float(amount)
        if amount <= 0:
            messagebox.showerror("Erreur", "Le montant doit √™tre positif.")
            return False
        if amount > self.limit:
            messagebox.showwarning("Limite d√©pass√©e", f"Le montant d√©passe la limite de {self.limit:.2f} ‚Ç¨.")
            return False
        if amount > self.balance:
            messagebox.showwarning("Solde insuffisant", f"Solde insuffisant ({self.balance:.2f} ‚Ç¨).")
            return False
        # D√©cr√©menter le solde puis tracer l‚Äôop√©ration
        self.balance -= amount
        self._historiser("retrait", amount)
        return True

    def deposit(self, amount: float) -> bool:
        """D√©poser de l'argent : v√©rifie que le montant est > 0."""
        amount = float(amount)
        if amount <= 0:
            messagebox.showerror("Erreur", "Le montant doit √™tre positif.")
            return False
        # Augmenter le solde puis tracer l‚Äôop√©ration
        self.balance += amount
        self._historiser("depot", amount)
        return True

    def transfer(self, amount: float, target_account: "Account") -> bool:
        """Transf√©rer vers un autre compte : retire ici, d√©pose chez la cible, historise les deux c√¥t√©s."""
        amount = float(amount)
        if self.withdraw(amount):
            target_account.deposit(amount)
            self._historiser("transfert_sortant", amount)
            target_account._historiser("transfert_entrant", amount)
            return True
        return False

    def set_limit(self, new_limit: float) -> bool:
        """Changer le plafond de retrait : doit √™tre strictement positif."""
        new_limit = float(new_limit)
        if new_limit <= 0:
            messagebox.showerror("Erreur", "La limite doit √™tre strictement positive.")
            return False
        self.limit = new_limit
        self._historiser("modif_plafond", new_limit)
        return True

    def _historiser(self, type_op: str, montant: float) -> None:
        """Ajouter une ligne dans l'historique (type, montant, date lisible, solde apr√®s)."""
        self.liste_historique.append({
            "type": type_op,
            "montant": float(montant),
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "solde_apres": float(self.balance),
        })

    def __str__(self) -> str:
        """Repr√©sentation texte 'propre' d‚Äôun compte."""
        return (
            f"{self.holder_name} ({self.account_number})\n"
            f"Solde : {self.balance:.2f} ‚Ç¨\n"
            f"Plafond de retrait : {self.limit:.2f} ‚Ç¨"
        )

# =======================
#   Bank App
# =======================
class BankApp(tk.Tk):
    def __init__(self) -> None:
        # Appelle le constructeur de tk.Tk pour cr√©er la fen√™tre principale
        super().__init__()
        # Titre et taille de la fen√™tre
        self.title("Gestion de Comptes Bancaires")
        self.geometry("680x400")
        # Dictionnaire des comptes (cl√© = nom du titulaire, valeur = objet Account)
        self.accounts: Dict[str, Account] = {
            "Ross": Account("Ross"),
            "Rachel": Account("Rachel"),
        }
        # Construit tout l‚ÄôUI puis s√©lectionne automatiquement un compte au d√©marrage
        self._build_ui()
        self._select_first_account()

    def _build_ui(self) -> None:
        """Cr√©e la mise en page : colonne gauche (liste & actions), colonne droite (infos & op√©rations)."""
        # Conteneur principal
        container = ttk.Frame(self, padding=10)
        container.pack(fill=tk.BOTH, expand=True)

        # --- Colonne gauche : liste de comptes + boutons Ajouter/Supprimer ---
        left = ttk.Frame(container)
        left.grid(row=0, column=0, sticky="nsw", padx=(0, 10))

        ttk.Label(left, text="Comptes :").pack(anchor="w")

        # StringVar li√©e √† la Listbox : quand on change acc_var, la liste se met √† jour
        self.acc_var = tk.StringVar(value=list(self.accounts.keys()))

        # Listbox montrant les noms des comptes
        self.listbox = tk.Listbox(left, listvariable=self.acc_var, height=10, exportselection=False, width=22)
        self.listbox.pack(fill="y")

        # √Ä chaque changement de s√©lection dans la liste, on rafra√Æchit le panneau d‚Äôinfos
        self.listbox.bind("<<ListboxSelect>>", lambda _e: self._refresh_info_panel())

        # Cadre pour les boutons li√©s aux comptes
        actions = ttk.Frame(left)
        actions.pack(fill="x", pady=(8, 0))

        # Bouton : Ajouter un compte (ouvre une fen√™tre avec formulaire)
        ttk.Button(actions, text="‚ûï Ajouter compte", command=self._on_add_account).grid(row=0, column=0, sticky="we", padx=(0, 6))
        # Bouton : Supprimer le compte s√©lectionn√© (avec confirmation)
        ttk.Button(actions, text="üóëÔ∏è Supprimer compte", command=self._on_delete_account).grid(row=0, column=1, sticky="we")

        # --- Colonne droite : panneau d‚Äôinfos + op√©rations ---
        right = ttk.Frame(container)
        right.grid(row=0, column=1, sticky="nsew")
        # Rendre la colonne droite extensible (prend l‚Äôespace restant)
        container.columnconfigure(1, weight=1)

        ttk.Label(right, text="Infos du compte :").grid(row=0, column=0, columnspan=2, sticky="w")

        # Zone de texte en lecture seule pour afficher les infos du compte
        self.info_text = tk.Text(right, width=50, height=7, state="disabled")
        self.info_text.grid(row=1, column=0, columnspan=2, sticky="we")

        # Champ de saisie pour taper un montant (d√©p√¥t/retrait/transfert)
        ttk.Label(right, text="Montant (‚Ç¨) :").grid(row=2, column=0, sticky="w", pady=(10, 0))
        self.amount_entry = ttk.Entry(right)
        self.amount_entry.grid(row=2, column=1, sticky="we", pady=(10, 0))
        right.columnconfigure(1, weight=1)  # la colonne du champ montant s‚Äô√©tire

        # Boutons d‚Äôop√©rations sur le compte s√©lectionn√©
        ttk.Button(right, text="‚ûï D√©p√¥t",       command=self._on_deposit).grid(  row=3, column=0, sticky="we", pady=5)
        ttk.Button(right, text="‚ûñ Retrait",     command=self._on_withdraw).grid( row=3, column=1, sticky="we", pady=5)
        ttk.Button(right, text="üîÅ Transf√©rer",  command=self._on_transfer).grid( row=4, column=0, sticky="we", pady=5)
        ttk.Button(right, text="üìú Historique",  command=self._on_show_history).grid(row=4, column=1, sticky="we", pady=5)
        ttk.Button(right, text="‚öôÔ∏è Modifier le plafond", command=self._on_set_limit).grid(row=5, column=0, sticky="we", pady=5)

        # Barre de statut en bas (messages utilisateur)
        self.status = ttk.Label(self, relief=tk.SUNKEN, anchor="w")
        self.status.pack(side=tk.BOTTOM, fill=tk.X)

    def _select_first_account(self) -> None:
        """S√©lectionne le premier compte de la liste au d√©marrage (si la liste n‚Äôest pas vide) puis met √† jour l‚Äôaffichage."""
        if self.listbox.size() > 0:              # size() = nombre d‚Äô√©l√©ments dans la Listbox
            self.listbox.selection_set(0)         # s√©lectionne l‚Äô√©l√©ment d‚Äôindex 0 (premier)
        self._refresh_info_panel()                # met √† jour le panneau d‚Äôinfos √† droite

    def _selected_account(self) -> Account:
        """Retourne l‚Äôobjet Account correspondant √† la s√©lection actuelle dans la Listbox."""
        sel = self.listbox.curselection()         # tuple d‚Äôindices s√©lectionn√©s (ex: (0,))
        name = self.listbox.get(sel[0])           # r√©cup√®re le nom affich√© √† l‚Äôindex s√©lectionn√©
        return self.accounts.get(name)            # retourne l‚Äôobjet Account stock√© dans le dict

    def _refresh_accounts_list(self, select_name: str = None) -> None:
        """Recharge la Listbox √† partir du dictionnaire self.accounts (sans g√©rer ici la s√©lection)."""
        names = list(self.accounts.keys())        # liste des noms (cl√©s du dict)
        self.acc_var.set(names)                   # met √† jour la Listbox via la StringVar li√©e
        self._refresh_info_panel()                # met √† jour le panneau d‚Äôinfos (au cas o√π)

    def _refresh_info_panel(self) -> None:
        """Efface et r√©√©crit le panneau d‚Äôinfos en fonction du compte s√©lectionn√©."""
        acc = self._selected_account()            # objet Account actuellement s√©lectionn√©
        self.info_text.config(state="normal")     # d√©verrouille la zone de texte pour √©crire dedans
        self.info_text.delete("1.0", tk.END)      # efface tout le texte
        if acc:
            self.info_text.insert(tk.END, str(acc))                      # affiche la repr√©sentation __str__ du compte
            self.status.config(text=f"Compte s√©lectionn√© : {acc.holder_name}")  # met √† jour la barre d‚Äô√©tat
        self.info_text.config(state="disabled")   # repasse en lecture seule (emp√™che l‚Äô√©dition manuelle)

    # =======================
    #  Actions
    # =======================
    def _on_add_account(self) -> None:
        """Ouvre une fen√™tre pour saisir un nouveau compte (nom + solde) puis le cr√©e."""

        def create_account() -> None:
            # R√©cup√©ration et validations des champs du formulaire
            name = entry_name.get()
            if not name:
                messagebox.showerror("Erreur", "Le nom du titulaire est obligatoire.")
                return
            try:
                balance = float(entry_balance.get())
            except ValueError:
                messagebox.showerror("Erreur", "Solde initial invalide.")
                return

            # Cr√©ation et enregistrement du compte dans le dictionnaire
            self.accounts[name] = Account(name, balance, DEFAULT_LIMIT)

            # Rafra√Æchir la liste
            self._refresh_accounts_list(select_name=name)

            # Message utilisateur dans la barre de statut (montants format√©s 2 d√©cimales)
            self.status.config(text=f"‚úÖ Compte '{name}' cr√©√© (solde {balance:.2f} ‚Ç¨, plafond {DEFAULT_LIMIT:.2f} ‚Ç¨).")

            # Fermer la fen√™tre d‚Äôajout
            add_win.destroy()

        # --- Petite fen√™tre (Toplevel) pour cr√©er un compte ---
        add_win = tk.Toplevel(self)
        add_win.title("‚ûï Ajouter un compte")
        add_win.geometry("340x210")
        add_win.resizable(False, False)

        ttk.Label(add_win, text="Nom du titulaire :").pack(pady=(12, 4))
        entry_name = ttk.Entry(add_win)           # champ pour le nom
        entry_name.pack(pady=4, fill="x", padx=16)
        entry_name.focus_set()                    # focus direct sur le champ

        ttk.Label(add_win, text="Solde initial (‚Ç¨) :").pack(pady=(10, 4))
        entry_balance = ttk.Entry(add_win)        # champ pour le solde initial
        entry_balance.insert(0, f"{DEFAULT_BALANCE:.0f}")  # valeur par d√©faut affich√©e (2000)
        entry_balance.pack(pady=4, fill="x", padx=16)

        # Boutons Valider / Annuler
        buttons = ttk.Frame(add_win)
        buttons.pack(pady=14)
        ttk.Button(buttons, text="‚úÖ Valider / Cr√©er", command=create_account).grid(row=0, column=0, padx=6, ipadx=6, ipady=3)
        ttk.Button(buttons, text="‚ùå Annuler", command=add_win.destroy).grid(row=0, column=1, padx=6, ipadx=6, ipady=3)

    def _on_delete_account(self) -> None:
        """Supprime le compte actuellement s√©lectionn√© apr√®s confirmation."""
        acc = self._selected_account()
        if not acc:
            messagebox.showwarning("Attention", "Aucun compte s√©lectionn√©.")
            return
        # Confirmation utilisateur
        if not messagebox.askyesno("Confirmation", f"Supprimer le compte '{acc.holder_name}' ?"):
            return
        # Suppression dans le dictionnaire puis rafra√Æchissement
        del self.accounts[acc.holder_name]
        self._refresh_accounts_list()
        self.status.config(text=f"üóëÔ∏è Compte '{acc.holder_name}' supprim√©.")

    def _on_deposit(self) -> None:
        """Lit le montant, effectue un d√©p√¥t sur le compte s√©lectionn√©, met √† jour la vue et vide le champ."""
        acc = self._selected_account()
        try:
            amt = float(self.amount_entry.get())  # conversion du texte saisi en float
        except ValueError:
            messagebox.showerror("Erreur", "Montant invalide.")
            return
        if acc.deposit(amt):
            self.status.config(text=f"üí∞ {amt:.2f} ‚Ç¨ d√©pos√©s sur {acc.holder_name}.")
            self._refresh_info_panel()            # r√©affiche solde/plafond mis √† jour
        self.amount_entry.delete(0, tk.END)       # vide le champ de saisie

    def _on_withdraw(self) -> None:
        """Lit le montant, effectue un retrait depuis le compte s√©lectionn√©, met √† jour la vue et vide le champ."""
        acc = self._selected_account()
        try:
            amt = float(self.amount_entry.get())
        except ValueError:
            messagebox.showerror("Erreur", "Montant invalide.")
            return
        if acc.withdraw(amt):
            self.status.config(text=f"üí∏ {amt:.2f} ‚Ç¨ retir√©s de {acc.holder_name}.")
            self._refresh_info_panel()
        self.amount_entry.delete(0, tk.END)

    def _on_transfer(self) -> None:
        """Ouvre une fen√™tre pour transf√©rer un montant vers un autre compte."""
        source = self._selected_account()         # compte √©metteur (s√©lectionn√©)

        def do_transfer() -> None:
            # Lecture du montant
            try:
                amt = float(entry_amount.get())
            except ValueError:
                messagebox.showerror("Erreur", "Montant invalide.")
                return
            # V√©rifier qu‚Äôune cible est s√©lectionn√©e
            sel = target_list.curselection()
            if not sel:
                messagebox.showwarning("Erreur", "Choisissez un compte destinataire.")
                return
            # R√©cup√©rer le nom et l‚Äôobjet Account du destinataire
            target_name = targets[sel[0]]
            target_acc = self.accounts[target_name]
            # Ex√©cuter le transfert + rafra√Æchissement + fermeture
            if source.transfer(amt, target_acc):
                self.status.config(text=f"üîÅ {amt:.2f} ‚Ç¨ transf√©r√©s de {source.holder_name} √† {target_acc.holder_name}.")
                self._refresh_info_panel()
                transfer_win.destroy()

        # --- Fen√™tre de transfert ---
        transfer_win = tk.Toplevel(self)
        transfer_win.title("Transfert")
        transfer_win.geometry("280x190")
        transfer_win.resizable(False, False)

        ttk.Label(transfer_win, text="Montant (‚Ç¨) :").pack(pady=(10, 4))
        entry_amount = ttk.Entry(transfer_win)     # champ montant
        entry_amount.pack(pady=4, fill="x", padx=12)

        ttk.Label(transfer_win, text="Vers le compte :").pack(pady=(10, 4))
        # Liste des noms cibles (tous les comptes sauf la source)
        targets = [name for name in self.accounts if name != source.holder_name]
        target_var = tk.StringVar(value=targets)
        target_list = tk.Listbox(transfer_win, listvariable=target_var, height=min(6, len(targets)), exportselection=False)
        target_list.pack(padx=12, fill="x")

        ttk.Button(transfer_win, text="Transf√©rer", command=do_transfer).pack(pady=12)

    def _on_show_history(self) -> None:
        """Affiche l‚Äôhistorique du compte s√©lectionn√© dans une nouvelle fen√™tre."""
        acc = self._selected_account()

        # Fen√™tre d‚Äôhistorique
        hist_win = tk.Toplevel(self)
        hist_win.title(f"Historique ‚Äî {acc.holder_name}")
        hist_win.geometry("460x260")
        hist_win.resizable(True, True)

        # Listbox pour lister chaque op√©ration
        hist_list = tk.Listbox(hist_win)
        hist_list.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Si aucun historique, message d√©di√©
        if not acc.liste_historique:
            hist_list.insert(tk.END, "Aucune op√©ration enregistr√©e.")
            return

        # Sinon, on affiche chaque ligne format√©e
        for op in acc.liste_historique:
            hist_list.insert(
                tk.END,
                f"{op['date']} | {op['type']} | {op['montant']:.2f} ‚Ç¨ | Solde: {op['solde_apres']:.2f} ‚Ç¨"
            )

    def _on_set_limit(self) -> None:
        """Ouvre une fen√™tre pour modifier le plafond du compte s√©lectionn√©."""
        acc = self._selected_account()

        def apply_limit() -> None:
            # Lecture du nouveau plafond
            try:
                new_limit = float(entry_limit.get())
            except ValueError:
                messagebox.showerror("Erreur", "Montant invalide.")
                return
            # Si la mise √† jour est valide, on actualise
            if acc.set_limit(new_limit):
                self.status.config(text=f"‚öôÔ∏è Nouveau plafond de {acc.holder_name} : {new_limit:.2f} ‚Ç¨")
                self._refresh_info_panel()
                limit_win.destroy()

        # --- Fen√™tre de modification du plafond ---
        limit_win = tk.Toplevel(self)
        limit_win.title("Modifier le plafond")
        limit_win.geometry("260x140")
        limit_win.resizable(False, False)

        ttk.Label(limit_win, text="Nouvelle limite (‚Ç¨) :").pack(pady=(12, 6))
        entry_limit = ttk.Entry(limit_win)
        entry_limit.insert(0, f"{acc.limit:.0f}")  # pr√©rempli avec la limite actuelle
        entry_limit.pack(pady=4, fill="x", padx=14)

        ttk.Button(limit_win, text="Appliquer", command=apply_limit).pack(pady=12)

# =======================
#   Point d‚Äôentr√©e
# =======================
if __name__ == "__main__":
    app = BankApp()    # instancie l‚Äôapplication (cr√©e la fen√™tre)
    app.mainloop()     # boucle d‚Äô√©v√©nements Tkinter (√©coute clics, clavier, etc.)
